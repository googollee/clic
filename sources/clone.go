package sources

import (
	"fmt"
	"reflect"

	"github.com/googollee/clic/structtags"
)

// newFromFields creates a new instance with the type generated by an name-ordered array of `fields`.
func newFromFields(fields []structtags.Field, index int, tagFmt string) reflect.Value {
	wantValues := make(map[string]reflect.Value)

	for len(fields) > 0 {
		if index != len(fields[0].Name)-1 {
			end := findEndFieldHaveSameIndex(fields, index+1)
			wantValues[fields[0].Name[index]] = newFromFields(fields[:end], index+1, tagFmt).Elem()

			fields = fields[end:]
			continue
		}

		wantValues[fields[0].Name[index]] = reflect.ValueOf(fields[0])
		fields = fields[1:]
	}

	wantFields := make([]reflect.StructField, 0, len(wantValues))
	for name, value := range wantValues {
		field := reflect.StructField{
			Name: "Field_" + name,
			Type: value.Type(),
			Tag:  reflect.StructTag(fmt.Sprintf(tagFmt, name)),
		}
		wantFields = append(wantFields, field)
	}

	typ := reflect.StructOf(wantFields)
	ret := reflect.New(typ)
	for name, value := range wantValues {
		ret.Elem().FieldByName("Field_" + name).Set(value)
	}

	fmt.Printf("%#v\n", ret.Interface())

	return ret
}

func findEndFieldHaveSameIndex(fields []structtags.Field, index int) (end int) {
	for end = 0; end < len(fields); end++ {
		if index >= len(fields[end].Name) {
			break
		}
	}

	return
}
